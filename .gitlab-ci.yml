stages:
    - build
    - docs
    - deploy
    - zenodo
variables:
  GIT_SUBMODULE_STRATEGY: recursive

# Build STL files
build:
    stage: build
    image: ubuntu:18.04

    before_script:
      - apt-get update -qq
      - apt-get -y -qq install software-properties-common dirmngr apt-transport-https lsb-release ca-certificates python3-pip
      - add-apt-repository -y ppa:openscad/releases
      - apt-get update -qq
      - apt-get install -y -qq openscad
      - apt-get install -qq git
      - apt-get install -qq git-lfs
      # - pip3 install -r requirements.txt

    script:
      # Build STL files with OpenSCAD
      - mkdir -p /root/.local/share
      - ./build.sh

    artifacts:
      expire_in: 1 week
      name: "${CI_PROJECT_NAME}-${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}"
      paths:
        - builds/*.stl
        - builds/*.svg

    only:
      - tags
      - merge_requests
      - web

build-docs:
    stage: docs
    dependencies:
      - build
    image: "python:3.7"

    before_script:
      - python --version
      - pip install gitbuilding

    script:
      - cd docs
      - mkdir models
      - cp -r ../builds/* models/
      - gitbuilding build-html
      - cd ..
      - mv docs/_site public

    artifacts:
        paths:
        - public
    only:
      - tags
      - merge_requests
      - web

# Deploy to builds.openflexure.org
deploy:
  stage: deploy
  dependencies:
    - build
    - build-docs
  image: ubuntu:latest

  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY_BATH_OPENFLEXURE_BASE64" | base64 --decode)
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

  script:
    # Install rsync if not already installed
    - 'which rsync || ( apt-get update -y && apt-get install rsync -y )'

    # Upload the builds folder to openflexure-microscope builds
    - rsync -hrvz -e ssh public/ ci-user@openflexure.bath.ac.uk:/var/www/build/${CI_PROJECT_NAME}/${CI_COMMIT_REF_NAME} --delete

    # Zip the builds folder and upload it to the openflexure-microscope build root
    - 'which zip || ( apt-get update -y && apt-get install zip -y )'
    - (cd public && zip -r "../${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}.zip" .)
    - rsync -hrvz -e ssh "${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}.zip" ci-user@openflexure.bath.ac.uk:/var/www/build/${CI_PROJECT_NAME}/

    # Run update-latest.py on the build server
    - ssh -t ci-user@openflexure.bath.ac.uk "/var/www/build/update-latest.py"

  artifacts:
    expire_in: 1 week
    name: "${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}.zip"
    paths:
      - "${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}.zip"

  only:
    - tags
    - web
zenodo:
  stage: zenodo
  image: ubuntu:18.04
  dependencies:
    - deploy
  before_script:
    - apt-get update -qq
    - apt-get -y -qq install git python3-pip
    - pip3 install -r scripts/zenodo/requirements.txt
  variables:
    ZENODO_USE_SANDBOX: "false"
  script:
    - mv "${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}.zip" "${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}-outputs.zip"
    - git archive "${CI_COMMIT_REF_NAME}" --format=zip --output="${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}-source.zip"
    - python3 scripts/zenodo/upload_to_zenodo.py "${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}-source.zip" "${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}-outputs.zip"
  artifacts:
    # this is only a small html link, let's just keep it forever
    # gitlab doesn't understand "expire_in: never" yet though
    expire_in: 100000 years
    name: zenodo-${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}-link.html
    paths:
      - zenodo-link.html
  only:
    - tags

